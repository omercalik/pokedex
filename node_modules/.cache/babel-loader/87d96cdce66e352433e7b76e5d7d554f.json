{"ast":null,"code":"'use strict';\n\nconst pMap = (iterable, mapper, options) => new Promise((resolve, reject) => {\n  options = Object.assign({\n    concurrency: Infinity\n  }, options);\n\n  if (typeof mapper !== 'function') {\n    throw new TypeError('Mapper function is required');\n  }\n\n  const {\n    concurrency\n  } = options;\n\n  if (!(typeof concurrency === 'number' && concurrency >= 1)) {\n    throw new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${concurrency}\\` (${typeof concurrency})`);\n  }\n\n  const ret = [];\n  const iterator = iterable[Symbol.iterator]();\n  let isRejected = false;\n  let isIterableDone = false;\n  let resolvingCount = 0;\n  let currentIndex = 0;\n\n  const next = () => {\n    if (isRejected) {\n      return;\n    }\n\n    const nextItem = iterator.next();\n    const i = currentIndex;\n    currentIndex++;\n\n    if (nextItem.done) {\n      isIterableDone = true;\n\n      if (resolvingCount === 0) {\n        resolve(ret);\n      }\n\n      return;\n    }\n\n    resolvingCount++;\n    Promise.resolve(nextItem.value).then(element => mapper(element, i)).then(value => {\n      ret[i] = value;\n      resolvingCount--;\n      next();\n    }, error => {\n      isRejected = true;\n      reject(error);\n    });\n  };\n\n  for (let i = 0; i < concurrency; i++) {\n    next();\n\n    if (isIterableDone) {\n      break;\n    }\n  }\n});\n\nmodule.exports = pMap; // TODO: Remove this for the next major release\n\nmodule.exports.default = pMap;","map":{"version":3,"sources":["/mnt/c/Users/viggn/OneDrive/Desktop/pokedex/node_modules/pokedex-promise-v2/node_modules/p-map/index.js"],"names":["pMap","iterable","mapper","options","Promise","resolve","reject","Object","assign","concurrency","Infinity","TypeError","ret","iterator","Symbol","isRejected","isIterableDone","resolvingCount","currentIndex","next","nextItem","i","done","value","then","element","error","module","exports","default"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmBC,OAAnB,KAA+B,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5EH,EAAAA,OAAO,GAAGI,MAAM,CAACC,MAAP,CAAc;AACvBC,IAAAA,WAAW,EAAEC;AADU,GAAd,EAEPP,OAFO,CAAV;;AAIA,MAAI,OAAOD,MAAP,KAAkB,UAAtB,EAAkC;AACjC,UAAM,IAAIS,SAAJ,CAAc,6BAAd,CAAN;AACA;;AAED,QAAM;AAACF,IAAAA;AAAD,MAAgBN,OAAtB;;AAEA,MAAI,EAAE,OAAOM,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,IAAI,CAApD,CAAJ,EAA4D;AAC3D,UAAM,IAAIE,SAAJ,CAAe,gEAA+DF,WAAY,OAAM,OAAOA,WAAY,GAAnH,CAAN;AACA;;AAED,QAAMG,GAAG,GAAG,EAAZ;AACA,QAAMC,QAAQ,GAAGZ,QAAQ,CAACa,MAAM,CAACD,QAAR,CAAR,EAAjB;AACA,MAAIE,UAAU,GAAG,KAAjB;AACA,MAAIC,cAAc,GAAG,KAArB;AACA,MAAIC,cAAc,GAAG,CAArB;AACA,MAAIC,YAAY,GAAG,CAAnB;;AAEA,QAAMC,IAAI,GAAG,MAAM;AAClB,QAAIJ,UAAJ,EAAgB;AACf;AACA;;AAED,UAAMK,QAAQ,GAAGP,QAAQ,CAACM,IAAT,EAAjB;AACA,UAAME,CAAC,GAAGH,YAAV;AACAA,IAAAA,YAAY;;AAEZ,QAAIE,QAAQ,CAACE,IAAb,EAAmB;AAClBN,MAAAA,cAAc,GAAG,IAAjB;;AAEA,UAAIC,cAAc,KAAK,CAAvB,EAA0B;AACzBZ,QAAAA,OAAO,CAACO,GAAD,CAAP;AACA;;AAED;AACA;;AAEDK,IAAAA,cAAc;AAEdb,IAAAA,OAAO,CAACC,OAAR,CAAgBe,QAAQ,CAACG,KAAzB,EACEC,IADF,CACOC,OAAO,IAAIvB,MAAM,CAACuB,OAAD,EAAUJ,CAAV,CADxB,EAEEG,IAFF,CAGED,KAAK,IAAI;AACRX,MAAAA,GAAG,CAACS,CAAD,CAAH,GAASE,KAAT;AACAN,MAAAA,cAAc;AACdE,MAAAA,IAAI;AACJ,KAPH,EAQEO,KAAK,IAAI;AACRX,MAAAA,UAAU,GAAG,IAAb;AACAT,MAAAA,MAAM,CAACoB,KAAD,CAAN;AACA,KAXH;AAaA,GAlCD;;AAoCA,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,WAApB,EAAiCY,CAAC,EAAlC,EAAsC;AACrCF,IAAAA,IAAI;;AAEJ,QAAIH,cAAJ,EAAoB;AACnB;AACA;AACD;AACD,CAjE2C,CAA5C;;AAmEAW,MAAM,CAACC,OAAP,GAAiB5B,IAAjB,C,CACA;;AACA2B,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyB7B,IAAzB","sourcesContent":["'use strict';\n\nconst pMap = (iterable, mapper, options) => new Promise((resolve, reject) => {\n\toptions = Object.assign({\n\t\tconcurrency: Infinity\n\t}, options);\n\n\tif (typeof mapper !== 'function') {\n\t\tthrow new TypeError('Mapper function is required');\n\t}\n\n\tconst {concurrency} = options;\n\n\tif (!(typeof concurrency === 'number' && concurrency >= 1)) {\n\t\tthrow new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${concurrency}\\` (${typeof concurrency})`);\n\t}\n\n\tconst ret = [];\n\tconst iterator = iterable[Symbol.iterator]();\n\tlet isRejected = false;\n\tlet isIterableDone = false;\n\tlet resolvingCount = 0;\n\tlet currentIndex = 0;\n\n\tconst next = () => {\n\t\tif (isRejected) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextItem = iterator.next();\n\t\tconst i = currentIndex;\n\t\tcurrentIndex++;\n\n\t\tif (nextItem.done) {\n\t\t\tisIterableDone = true;\n\n\t\t\tif (resolvingCount === 0) {\n\t\t\t\tresolve(ret);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tresolvingCount++;\n\n\t\tPromise.resolve(nextItem.value)\n\t\t\t.then(element => mapper(element, i))\n\t\t\t.then(\n\t\t\t\tvalue => {\n\t\t\t\t\tret[i] = value;\n\t\t\t\t\tresolvingCount--;\n\t\t\t\t\tnext();\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\tisRejected = true;\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t);\n\t};\n\n\tfor (let i = 0; i < concurrency; i++) {\n\t\tnext();\n\n\t\tif (isIterableDone) {\n\t\t\tbreak;\n\t\t}\n\t}\n});\n\nmodule.exports = pMap;\n// TODO: Remove this for the next major release\nmodule.exports.default = pMap;\n"]},"metadata":{},"sourceType":"script"}