{"ast":null,"code":"const axios = require('axios');\n\nconst {\n  handleError\n} = require('./error.js');\n\nexports.getJSON = async (values, url, cb) => {\n  let options = {\n    baseURL: `${values.protocol}${values.hostName}/`,\n    timeout: values.timeout\n  };\n\n  try {\n    // retrive possible content from memory-cache\n    const cachedResult = values.cache.get(url);\n\n    if (cachedResult !== null) {\n      if (cb) {\n        // call callback without errors\n        cb(cachedResult, false);\n      }\n\n      return cachedResult;\n    } else {\n      response = await axios.get(url, options); // if there is an error\n\n      if (response.statusCode !== undefined && response.statusCode !== 200) {\n        handleError(response, cb);\n      } else {\n        // if everything was good\n        // cache the object in memory-cache\n        // only if cacheLimit > 0\n        response = response.data;\n\n        if (values.cacheLimit > 0) {\n          values.cache.put(url, response, values.cacheLimit);\n        } // if a callback is present\n\n\n        if (cb) {\n          // call it, without errors\n          cb(response, false);\n        } else {\n          return response;\n        }\n      }\n    }\n  } catch (error) {\n    handleError(error, cb);\n  }\n};","map":{"version":3,"sources":["/mnt/c/Users/viggn/OneDrive/Desktop/pokedex/node_modules/pokedex-promise-v2/src/getter.js"],"names":["axios","require","handleError","exports","getJSON","values","url","cb","options","baseURL","protocol","hostName","timeout","cachedResult","cache","get","response","statusCode","undefined","data","cacheLimit","put","error"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAO,CAAC,YAAD,CAA/B;;AAGAE,OAAO,CAACC,OAAR,GAAkB,OAAOC,MAAP,EAAeC,GAAf,EAAoBC,EAApB,KAA2B;AACzC,MAAIC,OAAO,GAAG;AACVC,IAAAA,OAAO,EAAG,GAAEJ,MAAM,CAACK,QAAS,GAAEL,MAAM,CAACM,QAAS,GADpC;AAEVC,IAAAA,OAAO,EAAEP,MAAM,CAACO;AAFN,GAAd;;AAIA,MAAI;AACA;AACA,UAAMC,YAAY,GAAGR,MAAM,CAACS,KAAP,CAAaC,GAAb,CAAiBT,GAAjB,CAArB;;AACA,QAAIO,YAAY,KAAK,IAArB,EAA2B;AACvB,UAAIN,EAAJ,EAAQ;AACJ;AACAA,QAAAA,EAAE,CAACM,YAAD,EAAe,KAAf,CAAF;AACH;;AACD,aAAOA,YAAP;AACH,KAND,MAMO;AACHG,MAAAA,QAAQ,GAAG,MAAMhB,KAAK,CAACe,GAAN,CAAUT,GAAV,EAAeE,OAAf,CAAjB,CADG,CAEH;;AACA,UAAIQ,QAAQ,CAACC,UAAT,KAAwBC,SAAxB,IAAqCF,QAAQ,CAACC,UAAT,KAAwB,GAAjE,EAAsE;AAClEf,QAAAA,WAAW,CAACc,QAAD,EAAWT,EAAX,CAAX;AACH,OAFD,MAEO;AACH;AACA;AACA;AACAS,QAAAA,QAAQ,GAAGA,QAAQ,CAACG,IAApB;;AAEA,YAAId,MAAM,CAACe,UAAP,GAAoB,CAAxB,EAA2B;AACvBf,UAAAA,MAAM,CAACS,KAAP,CAAaO,GAAb,CAAiBf,GAAjB,EAAsBU,QAAtB,EAAgCX,MAAM,CAACe,UAAvC;AACH,SARE,CAUH;;;AACA,YAAIb,EAAJ,EAAQ;AACJ;AACAA,UAAAA,EAAE,CAACS,QAAD,EAAW,KAAX,CAAF;AACH,SAHD,MAGO;AACH,iBAAOA,QAAP;AACH;AACJ;AACJ;AACJ,GAjCD,CAiCE,OAAOM,KAAP,EAAc;AACZpB,IAAAA,WAAW,CAACoB,KAAD,EAAQf,EAAR,CAAX;AACH;AACJ,CAzCD","sourcesContent":["const axios = require('axios')\n\nconst { handleError } = require('./error.js')\n\n\nexports.getJSON = async (values, url, cb) => {\n    let options = {\n        baseURL: `${values.protocol}${values.hostName}/`,\n        timeout: values.timeout\n    }\n    try {\n        // retrive possible content from memory-cache\n        const cachedResult = values.cache.get(url)\n        if (cachedResult !== null) {\n            if (cb) {\n                // call callback without errors\n                cb(cachedResult, false)\n            }\n            return cachedResult\n        } else {\n            response = await axios.get(url, options)\n            // if there is an error\n            if (response.statusCode !== undefined && response.statusCode !== 200) {\n                handleError(response, cb)\n            } else {\n                // if everything was good\n                // cache the object in memory-cache\n                // only if cacheLimit > 0\n                response = response.data\n\n                if (values.cacheLimit > 0) {\n                    values.cache.put(url, response, values.cacheLimit)\n                }\n\n                // if a callback is present\n                if (cb) {\n                    // call it, without errors\n                    cb(response, false)\n                } else {\n                    return response\n                }\n            }\n        }\n    } catch (error) {\n        handleError(error, cb)\n    }\n}\n"]},"metadata":{},"sourceType":"script"}