{"ast":null,"code":"'use strict';\n\nfunction Cache() {\n  var _cache = Object.create(null);\n\n  var _hitCount = 0;\n  var _missCount = 0;\n  var _size = 0;\n  var _debug = false;\n\n  this.put = function (key, value, time, timeoutCallback) {\n    if (_debug) {\n      console.log('caching: %s = %j (@%s)', key, value, time);\n    }\n\n    if (typeof time !== 'undefined' && (typeof time !== 'number' || isNaN(time) || time <= 0)) {\n      throw new Error('Cache timeout must be a positive number');\n    } else if (typeof timeoutCallback !== 'undefined' && typeof timeoutCallback !== 'function') {\n      throw new Error('Cache timeout callback must be a function');\n    }\n\n    var oldRecord = _cache[key];\n\n    if (oldRecord) {\n      clearTimeout(oldRecord.timeout);\n    } else {\n      _size++;\n    }\n\n    var record = {\n      value: value,\n      expire: time + Date.now()\n    };\n\n    if (!isNaN(record.expire)) {\n      record.timeout = setTimeout(function () {\n        _del(key);\n\n        if (timeoutCallback) {\n          timeoutCallback(key, value);\n        }\n      }.bind(this), time);\n    }\n\n    _cache[key] = record;\n    return value;\n  };\n\n  this.del = function (key) {\n    var canDelete = true;\n    var oldRecord = _cache[key];\n\n    if (oldRecord) {\n      clearTimeout(oldRecord.timeout);\n\n      if (!isNaN(oldRecord.expire) && oldRecord.expire < Date.now()) {\n        canDelete = false;\n      }\n    } else {\n      canDelete = false;\n    }\n\n    if (canDelete) {\n      _del(key);\n    }\n\n    return canDelete;\n  };\n\n  function _del(key) {\n    _size--;\n    delete _cache[key];\n  }\n\n  this.clear = function () {\n    for (var key in _cache) {\n      clearTimeout(_cache[key].timeout);\n    }\n\n    _size = 0;\n    _cache = Object.create(null);\n\n    if (_debug) {\n      _hitCount = 0;\n      _missCount = 0;\n    }\n  };\n\n  this.get = function (key) {\n    var data = _cache[key];\n\n    if (typeof data != \"undefined\") {\n      if (isNaN(data.expire) || data.expire >= Date.now()) {\n        if (_debug) _hitCount++;\n        return data.value;\n      } else {\n        // free some space\n        if (_debug) _missCount++;\n        _size--;\n        delete _cache[key];\n      }\n    } else if (_debug) {\n      _missCount++;\n    }\n\n    return null;\n  };\n\n  this.size = function () {\n    return _size;\n  };\n\n  this.memsize = function () {\n    var size = 0,\n        key;\n\n    for (key in _cache) {\n      size++;\n    }\n\n    return size;\n  };\n\n  this.debug = function (bool) {\n    _debug = bool;\n  };\n\n  this.hits = function () {\n    return _hitCount;\n  };\n\n  this.misses = function () {\n    return _missCount;\n  };\n\n  this.keys = function () {\n    return Object.keys(_cache);\n  };\n\n  this.exportJson = function () {\n    var plainJsCache = {}; // Discard the `timeout` property.\n    // Note: JSON doesn't support `NaN`, so convert it to `'NaN'`.\n\n    for (var key in _cache) {\n      var record = _cache[key];\n      plainJsCache[key] = {\n        value: record.value,\n        expire: record.expire || 'NaN'\n      };\n    }\n\n    return JSON.stringify(plainJsCache);\n  };\n\n  this.importJson = function (jsonToImport, options) {\n    var cacheToImport = JSON.parse(jsonToImport);\n    var currTime = Date.now();\n    var skipDuplicates = options && options.skipDuplicates;\n\n    for (var key in cacheToImport) {\n      if (cacheToImport.hasOwnProperty(key)) {\n        if (skipDuplicates) {\n          var existingRecord = _cache[key];\n\n          if (existingRecord) {\n            if (_debug) {\n              console.log('Skipping duplicate imported key \\'%s\\'', key);\n            }\n\n            continue;\n          }\n        }\n\n        var record = cacheToImport[key]; // record.expire could be `'NaN'` if no expiry was set.\n        // Try to subtract from it; a string minus a number is `NaN`, which is perfectly fine here.\n\n        var remainingTime = record.expire - currTime;\n\n        if (remainingTime <= 0) {\n          // Delete any record that might exist with the same key, since this key is expired.\n          this.del(key);\n          continue;\n        } // Remaining time must now be either positive or `NaN`,\n        // but `put` will throw an error if we try to give it `NaN`.\n\n\n        remainingTime = remainingTime > 0 ? remainingTime : undefined;\n        this.put(key, record.value, remainingTime);\n      }\n    }\n\n    return this.size();\n  };\n}\n\nmodule.exports = new Cache();\nmodule.exports.Cache = Cache;","map":{"version":3,"sources":["/mnt/c/Users/viggn/OneDrive/Desktop/pokedex/node_modules/memory-cache/index.js"],"names":["Cache","_cache","Object","create","_hitCount","_missCount","_size","_debug","put","key","value","time","timeoutCallback","console","log","isNaN","Error","oldRecord","clearTimeout","timeout","record","expire","Date","now","setTimeout","_del","bind","del","canDelete","clear","get","data","size","memsize","debug","bool","hits","misses","keys","exportJson","plainJsCache","JSON","stringify","importJson","jsonToImport","options","cacheToImport","parse","currTime","skipDuplicates","hasOwnProperty","existingRecord","remainingTime","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction Cache () {\n  var _cache = Object.create(null);\n  var _hitCount = 0;\n  var _missCount = 0;\n  var _size = 0;\n  var _debug = false;\n\n  this.put = function(key, value, time, timeoutCallback) {\n    if (_debug) {\n      console.log('caching: %s = %j (@%s)', key, value, time);\n    }\n\n    if (typeof time !== 'undefined' && (typeof time !== 'number' || isNaN(time) || time <= 0)) {\n      throw new Error('Cache timeout must be a positive number');\n    } else if (typeof timeoutCallback !== 'undefined' && typeof timeoutCallback !== 'function') {\n      throw new Error('Cache timeout callback must be a function');\n    }\n\n    var oldRecord = _cache[key];\n    if (oldRecord) {\n      clearTimeout(oldRecord.timeout);\n    } else {\n      _size++;\n    }\n\n    var record = {\n      value: value,\n      expire: time + Date.now()\n    };\n\n    if (!isNaN(record.expire)) {\n      record.timeout = setTimeout(function() {\n        _del(key);\n        if (timeoutCallback) {\n          timeoutCallback(key, value);\n        }\n      }.bind(this), time);\n    }\n\n    _cache[key] = record;\n\n    return value;\n  };\n\n  this.del = function(key) {\n    var canDelete = true;\n\n    var oldRecord = _cache[key];\n    if (oldRecord) {\n      clearTimeout(oldRecord.timeout);\n      if (!isNaN(oldRecord.expire) && oldRecord.expire < Date.now()) {\n        canDelete = false;\n      }\n    } else {\n      canDelete = false;\n    }\n\n    if (canDelete) {\n      _del(key);\n    }\n\n    return canDelete;\n  };\n\n  function _del(key){\n    _size--;\n    delete _cache[key];\n  }\n\n  this.clear = function() {\n    for (var key in _cache) {\n      clearTimeout(_cache[key].timeout);\n    }\n    _size = 0;\n    _cache = Object.create(null);\n    if (_debug) {\n      _hitCount = 0;\n      _missCount = 0;\n    }\n  };\n\n  this.get = function(key) {\n    var data = _cache[key];\n    if (typeof data != \"undefined\") {\n      if (isNaN(data.expire) || data.expire >= Date.now()) {\n        if (_debug) _hitCount++;\n        return data.value;\n      } else {\n        // free some space\n        if (_debug) _missCount++;\n        _size--;\n        delete _cache[key];\n      }\n    } else if (_debug) {\n      _missCount++;\n    }\n    return null;\n  };\n\n  this.size = function() {\n    return _size;\n  };\n\n  this.memsize = function() {\n    var size = 0,\n      key;\n    for (key in _cache) {\n      size++;\n    }\n    return size;\n  };\n\n  this.debug = function(bool) {\n    _debug = bool;\n  };\n\n  this.hits = function() {\n    return _hitCount;\n  };\n\n  this.misses = function() {\n    return _missCount;\n  };\n\n  this.keys = function() {\n    return Object.keys(_cache);\n  };\n\n  this.exportJson = function() {\n    var plainJsCache = {};\n\n    // Discard the `timeout` property.\n    // Note: JSON doesn't support `NaN`, so convert it to `'NaN'`.\n    for (var key in _cache) {\n      var record = _cache[key];\n      plainJsCache[key] = {\n        value: record.value,\n        expire: record.expire || 'NaN',\n      };\n    }\n\n    return JSON.stringify(plainJsCache);\n  };\n\n  this.importJson = function(jsonToImport, options) {\n    var cacheToImport = JSON.parse(jsonToImport);\n    var currTime = Date.now();\n\n    var skipDuplicates = options && options.skipDuplicates;\n\n    for (var key in cacheToImport) {\n      if (cacheToImport.hasOwnProperty(key)) {\n        if (skipDuplicates) {\n          var existingRecord = _cache[key];\n          if (existingRecord) {\n            if (_debug) {\n              console.log('Skipping duplicate imported key \\'%s\\'', key);\n            }\n            continue;\n          }\n        }\n\n        var record = cacheToImport[key];\n\n        // record.expire could be `'NaN'` if no expiry was set.\n        // Try to subtract from it; a string minus a number is `NaN`, which is perfectly fine here.\n        var remainingTime = record.expire - currTime;\n\n        if (remainingTime <= 0) {\n          // Delete any record that might exist with the same key, since this key is expired.\n          this.del(key);\n          continue;\n        }\n\n        // Remaining time must now be either positive or `NaN`,\n        // but `put` will throw an error if we try to give it `NaN`.\n        remainingTime = remainingTime > 0 ? remainingTime : undefined;\n\n        this.put(key, record.value, remainingTime);\n      }\n    }\n\n    return this.size();\n  };\n}\n\nmodule.exports = new Cache();\nmodule.exports.Cache = Cache;\n"]},"metadata":{},"sourceType":"script"}